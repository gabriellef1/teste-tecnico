{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "18a4d5e9-cd36-4c85-8663-b658dc65ce6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Carregar o dataset do Brasileirão\n",
    "data_path = './data/Brasileirao_Matches.csv'\n",
    "df = pd.read_csv(data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4927c26f-c267-4c92-81db-1e0189ec5be0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>home_team</th>\n",
       "      <th>home_team_state</th>\n",
       "      <th>away_team</th>\n",
       "      <th>away_team_state</th>\n",
       "      <th>home_goal</th>\n",
       "      <th>away_goal</th>\n",
       "      <th>season</th>\n",
       "      <th>round</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Palmeiras-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Portuguesa-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Sport-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>Flamengo-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-05-19 21:00:00</td>\n",
       "      <td>Figueirense-SC</td>\n",
       "      <td>SC</td>\n",
       "      <td>Nautico-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Ponte Preta-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Atletico-MG</td>\n",
       "      <td>MG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Corinthians-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Fluminense-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime       home_team home_team_state      away_team  \\\n",
       "0  2012-05-19 18:30:00    Palmeiras-SP              SP  Portuguesa-SP   \n",
       "1  2012-05-19 18:30:00        Sport-PE              PE    Flamengo-RJ   \n",
       "2  2012-05-19 21:00:00  Figueirense-SC              SC     Nautico-PE   \n",
       "3  2012-05-20 16:00:00  Ponte Preta-SP              SP    Atletico-MG   \n",
       "4  2012-05-20 16:00:00  Corinthians-SP              SP  Fluminense-RJ   \n",
       "\n",
       "  away_team_state  home_goal  away_goal  season  round  \n",
       "0              SP        1.0        1.0    2012      1  \n",
       "1              RJ        1.0        1.0    2012      1  \n",
       "2              PE        2.0        1.0    2012      1  \n",
       "3              MG        0.0        1.0    2012      1  \n",
       "4              RJ        0.0        1.0    2012      1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exibir as primeiras linhas do dataset\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bcd453cb-be87-481b-83df-2e84adef89f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4180 entries, 0 to 4179\n",
      "Data columns (total 9 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   datetime         4180 non-null   object \n",
      " 1   home_team        4180 non-null   object \n",
      " 2   home_team_state  4180 non-null   object \n",
      " 3   away_team        4180 non-null   object \n",
      " 4   away_team_state  4180 non-null   object \n",
      " 5   home_goal        4098 non-null   float64\n",
      " 6   away_goal        4098 non-null   float64\n",
      " 7   season           4180 non-null   int64  \n",
      " 8   round            4180 non-null   int64  \n",
      "dtypes: float64(2), int64(2), object(5)\n",
      "memory usage: 294.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Verificar informações gerais do dataset\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4b60b4bc-5a15-432f-8696-493011782170",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home_goal</th>\n",
       "      <th>away_goal</th>\n",
       "      <th>season</th>\n",
       "      <th>round</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4098.000000</td>\n",
       "      <td>4098.000000</td>\n",
       "      <td>4180.000000</td>\n",
       "      <td>4180.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.411908</td>\n",
       "      <td>0.943143</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>19.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.156605</td>\n",
       "      <td>0.967592</td>\n",
       "      <td>3.162656</td>\n",
       "      <td>10.967168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>19.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>29.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2022.000000</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         home_goal    away_goal       season        round\n",
       "count  4098.000000  4098.000000  4180.000000  4180.000000\n",
       "mean      1.411908     0.943143  2017.000000    19.500000\n",
       "std       1.156605     0.967592     3.162656    10.967168\n",
       "min       0.000000     0.000000  2012.000000     1.000000\n",
       "25%       1.000000     0.000000  2014.000000    10.000000\n",
       "50%       1.000000     1.000000  2017.000000    19.500000\n",
       "75%       2.000000     1.000000  2020.000000    29.000000\n",
       "max       6.000000     6.000000  2022.000000    38.000000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verificar estatísticas descritivas das colunas numéricas\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5f797394-896d-43a5-b953-f0e7f363f2eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime            0\n",
       "home_team           0\n",
       "home_team_state     0\n",
       "away_team           0\n",
       "away_team_state     0\n",
       "home_goal          82\n",
       "away_goal          82\n",
       "season              0\n",
       "round               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verificar se há valores ausentes\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2acc51ee-165b-4983-8a37-b85d59d1be62",
   "metadata": {},
   "source": [
    "## Detalhes do Dataset:\n",
    "##### Código expandido por questão de teste técnico que exige 100.000 linhas. Fiz dados sintéticos (fictícios)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "da022d19-6144-4a2f-9016-935cd31bcc64",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "11f0e1df-8a3f-4bb2-9d2b-d99117d7f4cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 600x600 with 0 Axes>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 600x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24ecd020-4843-4ac2-86eb-130752398f51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>home_team</th>\n",
       "      <th>home_team_state</th>\n",
       "      <th>away_team</th>\n",
       "      <th>away_team_state</th>\n",
       "      <th>home_goal</th>\n",
       "      <th>away_goal</th>\n",
       "      <th>season</th>\n",
       "      <th>round</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Palmeiras-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Portuguesa-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Sport-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>Flamengo-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-05-19 21:00:00</td>\n",
       "      <td>Figueirense-SC</td>\n",
       "      <td>SC</td>\n",
       "      <td>Nautico-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Ponte Preta-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Atletico-MG</td>\n",
       "      <td>MG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Corinthians-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Fluminense-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime       home_team home_team_state      away_team  \\\n",
       "0  2012-05-19 18:30:00    Palmeiras-SP              SP  Portuguesa-SP   \n",
       "1  2012-05-19 18:30:00        Sport-PE              PE    Flamengo-RJ   \n",
       "2  2012-05-19 21:00:00  Figueirense-SC              SC     Nautico-PE   \n",
       "3  2012-05-20 16:00:00  Ponte Preta-SP              SP    Atletico-MG   \n",
       "4  2012-05-20 16:00:00  Corinthians-SP              SP  Fluminense-RJ   \n",
       "\n",
       "  away_team_state  home_goal  away_goal  season  round  \n",
       "0              SP        1.0        1.0    2012      1  \n",
       "1              RJ        1.0        1.0    2012      1  \n",
       "2              PE        2.0        1.0    2012      1  \n",
       "3              MG        0.0        1.0    2012      1  \n",
       "4              RJ        0.0        1.0    2012      1  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Carregar o dataset expandido\n",
    "file_path = './data/Brasileirao_Matches_Expanded.csv'\n",
    "\n",
    "# Carregar o dataset expandido\n",
    "final_data = pd.read_csv(file_path)\n",
    "\n",
    "# Verificar as primeiras linhas para garantir que foi carregado corretamente\n",
    "final_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8d487458-b20e-477e-93c3-1aef1978858f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O dataset contém 100000 linhas.\n"
     ]
    }
   ],
   "source": [
    "num_linhas = final_data.shape[0]\n",
    "print(f\"O dataset contém {num_linhas} linhas.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f47d0765-faa3-41a1-9ed9-5d088045489c",
   "metadata": {},
   "source": [
    "##### Essa análise nos mostra como os gols estão distribuídos ao longo das partidas.\n",
    "##### Ela pode ajudar a identificar se há uma tendência de muitos ou poucos gols."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e8fdc57b-6271-4921-8bf1-65098265e3ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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qFKlCh999FG6PYRPPfUU9erVAyAmJoZhw4ZRo0YN3N3d8fDwoE2bNvzzzz9pjps8eTLVqlWjUKFCFClShDp16jB37lzL/qNHjzJo0CAqV65828/hzRITE/H29qZv375p9sXGxuLi4sKwYcOy3I70PPnkk1y6dCndz/q8efNISUmhV69eQPo/h6Kioujbty+lSpXC2dmZEiVK0LFjR6tru/nn2e1+1q5bt46uXbtSunRpnJ2dCQgI4OWXX+batWtWbXv66adxd3fn5MmTdOrUCXd3d3x8fBg2bBjJycmW9qb+EWr06NGWc908r3Xfvn08/vjjeHt74+LiQp06ddIdnlm8eHFq1qzJzz//nOnrKXIvuX/+PCUid+2pp57if//7H8uXL2fAgAHpltm9ezft27enZs2ajBkzBmdnZw4ePMj69esBqFq1KmPGjGHkyJEMHDiQxo0bA1gNXTp//jxt2rShe/fuPPnkk/j6+mbarvfffx+TycTrr7/OmTNnmDhxIi1btiQiIsLSk3c3duzYQePGjXF0dGTgwIGULVuWQ4cO8euvv/L+++8DsHHjRsLDw+nRowelSpUiMjKSadOm0axZM/bs2WPpYYmOjqZBgwZcvXqVF198kaJFizJ79mweffRRFixYQOfOnTNtyzPPPMN3331Hz549adCgAatWraJdu3ZpykVHR/Pggw9iMpkYMmQIPj4+/P777/Tv35/Y2FiGDh2a4Tl+//13kpOTefLJJ7P8GhmGwaOPPsrq1avp378/wcHB/PHHHwwfPpyTJ0/yySefZHjsqFGjGDduHM888wz16tUjNjaWLVu2sG3bNh5++OHbnnvIkCF4eXkxatQo9u/fz+eff87Ro0cti76knmP06NG0bNmS559/3lJu8+bNrF+/3qqX6U7ff+k5dOgQAEWLFiU2NpavvvqKHj16MGDAAC5fvszXX39Nq1at2LRpU5qhZDNnziQ+Pp6BAwfi7OxM586duXz5cqafmZsZhkHHjh3566+/eO6556hatSo//fQTffr0SVM2LCyMw4cP07dvX/z8/Ni9ezfTp09n9+7d/P3335kOtzx58iTHjh3jgQcesNr+119/ERMTw9ChQ7G3t7/ta3X48GEWL15M165dCQwMJDo6mi+++IKmTZuyZ88e/P39AfPQzBdffJHHH3+cl156ifj4eHbs2MHGjRvp2bMnAJs3b2bDhg10796dUqVKceTIET7//PM0n8NbOTo60rlzZxYtWsQXX3xh1dO0ePFirl+/Tvfu3bPcjvQ89thjPP/888ydO5fHHnvMat/cuXMpU6YMDRs2zPD4Ll26sHv3bl544QXKli3LmTNnCAsL49ixY+ku6nK7n7U//vgjV69e5fnnn6do0aJs2rSJyZMnc+LECX788UerupKTk2nVqhX169fno48+YsWKFUyYMIHy5cvz/PPP4+Pjw+eff87zzz9P586dLdeXOrx99+7dNGzYkJIlS/LGG2/g5ubG/Pnz6dSpEwsXLkzzc6927dosXrw4w9dC5J5jiIjcMHPmTAMwNm/enGEZT09PIyQkxPL8nXfeMW7+UfLJJ58YgHH27NkM69i8ebMBGDNnzkyzr2nTpgZgTJs2Ld19TZs2tTxfvXq1ARglS5Y0YmNjLdvnz59vAMakSZMs28qUKWP06dPntnVGRkamaVuTJk2MwoULG0ePHrU6NiUlxfL11atX09QdHh5uAMY333xj2TZ06FADMNatW2fZdvnyZSMwMNAoW7askZycnKaeVBEREQZgDBo0yGp7z549DcB45513LNv69+9vlChRwjh37pxV2e7duxuenp7ptjfVyy+/bABGRESE1fbr168bZ8+etTxurnvx4sUGYLz33ntWxzz++OOGyWQyDh48aNl26/eiVq1aRrt27TJsT0ZS36+1a9c2EhISLNvHjx9vAMbPP/9sGIZhnDlzxnBycjIeeeQRq9d3ypQpBmDMmDHDsi2z9196Ut//+/fvN86ePWtERkYaX3zxheHs7Gz4+voaV65cMZKSkozr169bHXfhwgXD19fX6Nevn2Vb6nvPw8PDOHPmjFX5zD4zffr0McqUKWN5nvq9GD9+vGVbUlKS0bhx4zR1pPc++P777w3AWLt2babXvmLFCgMwfv31V6vtkyZNMgDjp59+yvT4VPHx8Wne95GRkYazs7MxZswYy7aOHTsa1apVy7SurH4O0/PHH3+kez1t27Y1ypUrd0ftyEjXrl0NFxcX49KlS5Zt+/btMwBjxIgRlm23/hy6cOGCARgffvhhpvXf+vMss/dNeq/VuHHjDJPJZPWzrk+fPgZg9b0wDMMICQkxateubXl+9uzZND+HUrVo0cKoUaOGER8fb9mWkpJiNGjQwKhYsWKa8mPHjjUA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EBgYyLfffsvmzZsJDAzM8Prq16/Pa6+9xquvvsrJkyfp3Lkz/v7+HDx4kGnTptGoUSNeeuklKlasyKJFi+jQoQMmk4m3337bakGOJUuWcPjwYZo0aUKRIkX47bffSElJoXLlyhQpUoSiRYsyffp0SpQowbFjx3jjjTey8+3ItxTIROSeczYqil03ltpNT/XZs/OwNSIiklv8/HyydbPmuznfnShfvjzbt29n7NixjBgxghMnTuDs7ExQUBDDhg2zrE5oMpn4+eefeeGFF2jSpAl2dna0bt2ayZMnp1tvoUKF2LdvH7Nnz+b8+fOUKFGCwYMH8+yzz6Zb3t3dnV9//ZXnnnuOkJAQgoKC+OCDD6wWy3j22WfZvn07TzzxBCaTiR49ejBo0CB+//33TK/xgw8+oHbt2nz22WdMmzaNlJQUypcvz+OPP25Z9v7jjz+mX79+NGjQgGLFivH6668TGxtrqcPLy4tFixYxatQo4uPjqVixIt9//z3VqlUDzMMpX3zxRapXr07lypX59NNPadasWZa/D/mdycjqbDy5rdjYWDw9Pbl06RIeHh62bo7Ifat6YOBtA9muyMg8bJGIiGRXfHw8kZGRBAYGWi1KIZIfZPb+zGo20BwyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREHWzdARESyJzS0OVFRZzPc7+fnQ3j46jxskYiIiNwpBTIRkQIqKuosffrsynD/7NnV87A1IiJ5r3loKGejovLsfD5+fqwOD8+z891s1KhRLF68mIiIiByp78iRIwQGBrJ9+3aCg4NzpM67PU9etSm/USATERERkQLpbFQUu/r0ybPzVZ89+46PiYqKYty4cSxdupQTJ07g6elJhQoVePLJJ+nTpw+FChXKhZbmvoULF9KtWzeOHTtGyZIl0+yvWLEiHTp04MMPP+T06dMUK1bstnUGBARYlV2zZg3NmzfnwoULeHl55Wj7Z82axdChQ7l48WKO1psdmkMmIiIiIpILDh8+TEhICMuXL2fs2LFs376d8PBwXnvtNZYsWcKKFSts3cRse/TRRylatCiz0wmpa9eu5eDBg/Tv3x97e3v8/PxwcLh9P9CdlL2XKJCJiIiIiOSCQYMG4eDgwJYtW+jW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RMTW8nUgO3PmDHFxcfzf//0frVu3Zvny5XTu3JnHHnuMP//8E4CoqCicnJysbhYH4OvrS9SN+TRRUVFWYSx1f+q+zMrExsZy7dq1dNs3btw4PD09LY+b7x0hIiIiIiJyOzYfspiZ1PsEdOzYkZdffhmA4OBgNmzYwLRp02jatKktm8eIESN45ZVXLM9jY2MVykRE8piW/xcRkYIsXweyYsWK4eDgkOb+C6nzuwD8/PxISEjg4sWLVr1k0dHR+N1YCcfPz49NmzZZ1REdHW3Zl/pv6raby3h4eGR44z5nZ2ecnZ2zf4EiInL3tPy/yH3BxuvQiaQrJ96X+XrIopOTE3Xr1k1zh/N///2XMmXKAFC7dm0cHR1ZuXKlZf/+/fs5duwYoaGhAISGhrJz507OnDljKRMWFoaHh4cl7IWGhlrVkVomtQ4RERERyXuOjo4AXL161cYtEUkr9X2Z+j7NDpv3kMXFxXHw4EHL88jISCIiIvD29qZ06dIMHz6cJ554giZNmtC8eXOWLVvGr7/+ypo1awDw9PSkf//+vPLKK3h7e+Ph4cELL7xAaGio5U7ljzzyCEFBQTz11FOMHz+eqKgo3nrrLQYPHmzp4XruueeYMmUKr732Gv369WPVqlXMnz+fpUuX5vlrIiIiIiJm9vb2eHl5Wf6wXqhQIUwmk41bJfc7wzC4evUqZ86cwcvLC3t7+2zXZfNAtmXLFpo3b255njonq0+fPsyaNYvOnTszbdo0xo0bx4svvkjlypVZuHAhjRo1shzzySefYGdnR5cuXaxuDJ3K3t6eJUuW8PzzzxMaGoqbmxt9+vRhzJgxljKBgYEsXbqUl19+mUmTJlGqVCm++uorLXkvIiIiYmOpU0xuHu0kkh94eXlZ3p/ZZfNA1qxZs9uOvezXrx/9+vXLcL+LiwufffYZn332WYZlypQpw2+//Xbbtmzfvj3zBouIiIhInjKZTJQoUYLixYuTmJho6+aIAOZhinfTM5bK5oFMRERERCQr7O3tc+QXYJH8JF8v6iEiIiIiInIvUyATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG7F5IFu7di0dOnTA398fk8nE4sWLMyz73HPPYTKZmDhxotX2mJgYevXqhYeHB15eXvTv35+4uDirMjt27KBx48a4uLgQEBDA+PHj09T/448/UqVKFVxcXKhRowa//fZbTlyiiIiIiIhIumweyK5cuUKtWrX47LPPMi33008/8ffff+Pv759mX69evdi9ezdhYWEsWbKEtWvXMnDgQMv+2NhYHnnkEcqUKcPWrVv58MMPGTVqFNOnT7eU2bBhAz169KB///5s376dTp060alTJ3bt2pVzFysiIiIiInITB1s3oE2bNrRp0ybTMidPnuSFF17gjz/+oF27dlb79u7dy7Jly9i8eTN16tQBYPLkybRt25aPPvoIf39/5syZQ0JCAjNmzMDJyYlq1aoRERHBxx9/bAlukyZNonXr1gwfPhyAd999l7CwMKZMmcK0adNy4cpFREREROR+Z/MesttJSUnhqaeeYvjw4VSrVi3N/vDwcLy8vCxhDKBly5bY2dmxceNGS5kmTZrg5ORkKdOqVSv279/PhQsXLGVatmxpVXerVq0IDw/PsG3Xr18nNjbW6iEiIiIiIpJVNu8hu50PPvgABwcHXnzxxXT3R0VFUbx4cattDg4OeHt7ExUVZSkTGBhoVcbX19eyr0iRIkRFRVm23VwmtY70jBs3jtGjR9/xNYnkhlOno5g4cWrmZeIv51FrRERERCQr8nUg27p1K5MmTWLbtm2YTCZbNyeNESNG8Morr1iex8bGEhAQYMMWyf0sOSmZ4OBBmZf5a2wetUZEREREsiJfD1lct24dZ86coXTp0jg4OODg4MDRo0d59dVXKVu2LAB+fn6cOXPG6rikpCRiYmLw8/OzlImOjrYqk/r8dmVS96fH2dkZDw8Pq4eIiIiIiEhW5etA9tRTT7Fjxw4iIiIsD39/f4YPH84ff/wBQGhoKBcvXmTr1q2W41atWkVKSgr169e3lFm7di2JiYmWMmFhYVSuXJkiRYpYyqxcudLq/GFhYYSGhub2ZYqIiIiIyH3K5kMW4+LiOHjwoOV5ZGQkEREReHt7U7p0aYoWLWpV3tHRET8/PypXrgxA1apVad26NQMGDGDatGkkJiYyZMgQunfvblkiv2fPnowePZr+/fvz+uuvs2vXLiZNmsQnn3xiqfell16iadOmTJgwgXbt2jFv3jy2bNlitTS+iIiIiIhITrJ5D9mWLVsICQkhJCQEgFdeeYWQkBBGjhyZ5TrmzJlDlSpVaNGiBW3btqVRo0ZWQcrT05Ply5cTGRlJ7dq1efXVVxk5cqTVvcoaNGjA3LlzmT59OrVq1WLBggUsXryY6tWr59zFioiIiIiI3MTmPWTNmjXDMIwslz9y5Eiabd7e3sydOzfT42rWrMm6desyLdO1a1e6du2a5baIiIiIiIjcDZv3kImIiIiIiNyvFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEYUyERERERERGxEgUxERERERMRGFMhERERERERsRIFMRERERETERhTIREREREREbESBTERERERExEZsHsjWrl1Lhw4d8Pf3x2QysXjxYsu+xMREXn/9dWrUqIGbmxv+/v707t2bU6dOWdURExNDr1698PDwwMvLi/79+xMXF2dVZseOHTRu3BgXFxcCAgIYP358mrb8+OOPVKlSBRcXF2rUqMFvv/2WK9csIiKS00JDmxMYWD3TR2hoc1s3U0REbuFg6wZcuXKFWrVq0a9fPx577DGrfVevXmXbtm28/fbb1KpViwsXLvDSSy/x6KOPsmXLFku5Xr16cfr0acLCwkhMTKRv374MHDiQuXPnAhAbG8sjjzxCy5YtmTZtGjt37qRfv354eXkxcOBAADZs2ECPHj0YN24c7du3Z+7cuXTq1Ilt27ZRvXr1vHtBREREsiEq6ix9+uzKtMzs2fr/TEQkv7F5IGvTpg1t2rRJd5+npydhYWFW26ZMmUK9evU4duwYpUuXZu/evSxbtozNmzdTp04dACZPnkzbtm356KOP8Pf3Z86cOSQkJDBjxgycnJyoVq0aERERfPzxx5ZANmnSJFq3bs3w4cMBePfddwkLC2PKlClMmzYtF18BERERERG5X9l8yOKdunTpEiaTCS8vLwDCw8Px8vKyhDGAli1bYmdnx8aNGy1lmjRpgpOTk6VMq1at2L9/PxcuXLCUadmypdW5WrVqRXh4eIZtuX79OrGxsVYPERERERGRrCpQgSw+Pp7XX3+dHj164OHhAUBUVBTFixe3Kufg4IC3tzdRUVGWMr6+vlZlUp/frkzq/vSMGzcOT09PyyMgIODuLlBERERERO4rBSaQJSYm0q1bNwzD4PPPP7d1cwAYMWIEly5dsjyOHz9u6yaJiIiIiEgBYvM5ZFmRGsaOHj3KqlWrLL1jAH5+fpw5c8aqfFJSEjExMfj5+VnKREdHW5VJfX67Mqn70+Ps7Iyzs3P2L0xERERERO5r+b6HLDWMHThwgBUrVlC0aFGr/aGhoVy8eJGtW7datq1atYqUlBTq169vKbN27VoSExMtZcLCwqhcuTJFihSxlFm5cqVV3WFhYYSGhubWpYmIiIiIyH3O5oEsLi6OiIgIIiIiAIiMjCQiIoJjx46RmJjI448/zpYtW5gzZw7JyclERUURFRVFQkICAFWrVqV169YMGDCATZs2sX79eoYMGUL37t3x9/cHoGfPnjg5OdG/f392797NDz/8wKRJk3jllVcs7XjppZdYtmwZEyZMYN++fYwaNYotW7YwZMiQPH9NRERERETk/mDzQLZlyxZCQkIICQkB4JVXXiEkJISRI0dy8uRJfvnlF06cOEFwcDAlSpSwPDZs2GCpY86cOVSpUoUWLVrQtm1bGjVqxPTp0y37PT09Wb58OZGRkdSuXZtXX32VkSNHWpa8B2jQoAFz585l+vTp1KpViwULFrB48WLdg0xERERERHKNzeeQNWvWDMMwMtyf2b5U3t7elptAZ6RmzZqsW7cu0zJdu3ala9eutz2f5C/NQ0M5m8lqmD5+fqzO5PYFIiIiIiK2YvNAJnK3zkZFsatPnwz3V589Ow9bIyIiIiKSdTYfsigiIiIiInK/UiATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEQUyERERERERG1EgExERERERsREFMhERERERERtRIBMREREREbERBTIREREREREbUSATERERERGxEYe7OXjLli3Mnz+fY8eOkZCQYLVv0aJFd9UwERERERGRe122e8jmzZtHgwYN2Lt3Lz/99BOJiYns3r2bVatW4enpmZNtFBERERERuSdlO5CNHTuWTz75hF9//RUnJycmTZrEvn376NatG6VLl85yPWvXrqVDhw74+/tjMplYvHix1X7DMBg5ciQlSpTA1dWVli1bcuDAAasyMTEx9OrVCw8PD7y8vOjfvz9xcXFWZXbs2EHjxo1xcXEhICCA8ePHp2nLjz/+SJUqVXBxcaFGjRr89ttvWX9BRERERERE7lC2A9mhQ4do164dAE5OTly5cgWTycTLL7/M9OnTs1zPlStXqFWrFp999lm6+8ePH8+nn37KtGnT2LhxI25ubrRq1Yr4+HhLmV69erF7927CwsJYsmQJa9euZeDAgZb9sbGxPPLII5QpU4atW7fy4YcfMmrUKKt2btiwgR49etC/f3+2b99Op06d6NSpE7t27brTl0ZERERERCRLsj2HrEiRIly+fBmAkiVLsmvXLmrUqMHFixe5evVqlutp06YNbdq0SXefYRhMnDiRt956i44dOwLwzTff4Ovry+LFi+nevTt79+5l2bJlbN68mTp16gAwefJk2rZty0cffYS/vz9z5swhISGBGTNm4OTkRLVq1YiIiODjjz+2BLdJkybRunVrhg8fDsC7775LWFgYU6ZMYdq0adl9mURERERERDKU7R6yJk2aEBYWBkDXrl156aWXGDBgAD169KBFixY50rjIyEiioqJo2bKlZZunpyf169cnPDwcgPDwcLy8vCxhDKBly5bY2dmxceNGS5kmTZrg5ORkKdOqVSv279/PhQsXLGVuPk9qmdTzpOf69evExsZaPURERERERLIq2z1kU6ZMsQwbfPPNN3F0dGTDhg106dKFt956K0caFxUVBYCvr6/Vdl9fX8u+qKgoihcvbrXfwcEBb29vqzKBgYFp6kjdV6RIEaKiojI9T3rGjRvH6NGjs3FlIiIiIiIidxHIvL29LV/b2dnxxhtv5EiDCpIRI0bwyiuvWJ7HxsYSEBBgwxaJiIiIiEhBckeBLDY2Fg8PD8vXmUktdzf8/PwAiI6OpkSJEpbt0dHRBAcHW8qcOXPG6rikpCRiYmIsx/v5+REdHW1VJvX57cqk7k+Ps7Mzzs7O2bgyERERERGRO5xDVqRIEUv48fLyokiRImkeqdtzQmBgIH5+fqxcudKyLTY2lo0bNxIaGgpAaGgoFy9eZOvWrZYyq1atIiUlhfr161vKrF27lsTEREuZsLAwKleubGlraGio1XlSy6SeR0REREREJKfdUQ/ZqlWrLEMVV69enSMNiIuL4+DBg5bnkZGRRERE4O3tTenSpRk6dCjvvfceFStWJDAwkLfffht/f386deoEQNWqVWndujUDBgxg2rRpJCYmMmTIELp3746/vz8APXv2ZPTo0fTv35/XX3+dXbt2MWnSJD755BPLeV966SWaNm3KhAkTaNeuHfPmzWPLli13tIS/iIiIiIjInbijQNa0adN0v74bW7ZsoXnz5pbnqXOy+vTpw6xZs3jttde4cuUKAwcO5OLFizRq1Ihly5bh4uJiOWbOnDkMGTKEFi1aYGdnR5cuXfj0008t+z09PVm+fDmDBw+mdu3aFCtWjJEjR1rdq6xBgwbMnTuXt956i//9739UrFiRxYsXU7169Ry5ThERERERkVtle1GPmTNn4u7uTteuXa22//jjj1y9epU+ffpkqZ5mzZphGEaG+00mE2PGjGHMmDEZlvH29mbu3LmZnqdmzZqsW7cu0zJdu3ZNcz0iIiIiIiK5Jdv3IRs3bhzFihVLs7148eKMHTv2rholIiIiIiJyP8h2IDt27Fiae3sBlClThmPHjt1Vo0RERERERO4H2Q5kxYsXZ8eOHWm2//PPPxQtWvSuGiUiIiIiInI/yHYg69GjBy+++CKrV68mOTmZ5ORkVq1axUsvvUT37t1zso0iIiIiIiL3pGwv6vHuu+9y5MgRWrRogYODuZqUlBR69+6tOWQiIiIiIiJZkO1A5uTkxA8//MC7777LP//8g6urKzVq1KBMmTI52T4REREREZF7VrYDWapKlSpRqVKlnGiLiIiIZFPMqcN8NSntYls3u3w1Oo9aIyIiWZXtQJacnMysWbNYuXIlZ86cISUlxWr/qlWr7rpxIiIikkXJSXxXK/N7gHb8S1MKRETym2wHspdeeolZs2bRrl07qlevjslkysl2iYiIiIiI3POyHcjmzZvH/Pnzadu2bU62R0RERERE5L6R7WXvnZycqFChQk62RURERERE5L6S7UD26quvMmnSJAzDyMn2iIiIiIiI3DeyPWTxr7/+YvXq1fz+++9Uq1YNR0dHq/2LFi2668aJiIiIiIjcy7IdyLy8vOjcuXNOtkUkW06djmLixKkZ74+/nIetERERERHJumwHspkzZ+ZkO0SyLTkpmeDgQRnv1zLPIiIiIpJPZXsOGUBSUhIrVqzgiy++4PJlcy/EqVOniIuLy5HGiYiIiIiI3MvuuIcsJSUFOzs7jh49SuvWrTl27BjXr1/n4YcfpnDhwnzwwQdcv36dadOm5UZ7RURERERE7hl31EO2c+dOmjRpAphvDF2nTh0uXLiAq6urpUznzp1ZuXJlzrZSRERERETkHpTlHrIFCxYwZswYvvvuOwDWrVvHhg0bcHJysipXtmxZTp48mbOtFBERERERuQdluYcsJSWF5ORkTCaT1fNbnThxgsKFC+dcC0VERERERO5RWQ5k3bp149tvv2XgwIEAPPzww0ycONGy32QyERcXxzvvvEPbtm1zvKEiIiIiIiL3mjta1OOBBx5g3bp1AHz88ce0atWKoKAg4uPj6dmzJwcOHKBYsWJ8//33udJYERERERGRe8kdr7Lo4GA+pFSpUvzzzz/MmzePHTt2EBcXR//+/enVq5fVIh8iIiIiIiKSvmzfGBrM4ezJJ5/MqbaIiIiIiIjcV7IdyL755ptM9/fu3Tu7VYuIiIiIiNwXsh3IXnrpJavniYmJXL16FScnJwoVKqRAJiIiIiIicht3dGPom124cMHqERcXx/79+2nUqJEW9RAREREREcmCbAey9FSsWJH/+7//S9N7JiIiIiIiImnlaCAD80Ifp06dyulqRURERERE7jnZnkP2yy+/WD03DIPTp08zZcoUGjZseNcNExERERERuddlO5B16tTJ6rnJZMLHx4eHHnqICRMm3G27RERERERE7nnZDmQpKSk52Q4REREREZH7To7PIRMREREREZGsyXYP2SuvvJLlsh9//HF2TyMiIiIiInLPynYg2759O9u3bycxMZHKlSsD8O+//2Jvb88DDzxgKWcyme6+lSIiIiIiIvegbAeyDh06ULhwYWbPnk2RIkUA882i+/btS+PGjXn11VdzrJEiIiIiIiL3omzPIZswYQLjxo2zhDGAIkWK8N5772mVRRERERERkSzIdiCLjY3l7NmzabafPXuWy5cv31WjRERERERE7gfZDmSdO3emb9++LFq0iBMnTnDixAkWLlxI//79eeyxx3KyjSIiIiIiIvekbM8hmzZtGsOGDaNnz54kJiaaK3NwoH///nz44Yc51kAREREREZF7VbYDWaFChZg6dSoffvghhw4dAqB8+fK4ubnlWONERERERETuZXd9Y+jTp09z+vRpKlasiJubG4Zh5ES7LJKTk3n77bcJDAzE1dWV8uXL8+6771qdxzAMRo4cSYkSJXB1daVly5YcOHDAqp6YmBh69eqFh4cHXl5e9O/fn7i4OKsyO3bsoHHjxri4uBAQEMD48eNz9FpERERERERulu1Adv78eVq0aEGlSpVo27Ytp0+fBqB///45uuT9Bx98wOeff86UKVPYu3cvH3zwAePHj2fy5MmWMuPHj+fTTz9l2rRpbNy4ETc3N1q1akV8fLylTK9evdi9ezdhYWEsWbKEtWvXMnDgQMv+2NhYHnnkEcqUKcPWrVv58MMPGTVqFNOnT8+xaxEREREREblZtgPZyy+/jKOjI8eOHaNQoUKW7U888QTLli3LkcYBbNiwgY4dO9KuXTvK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hQoVMjx27NixWqFChTIcq1ChQprRaLRuK1GihFanTh3r92lpaZq3t7f2+++/a5qmab/++qtWokQJzWQyWfdJTk7WPD09taVLl1qPmydPHi05Odm6z/fff68FBARoCQkJ1m2LFi3S9Hq9Fhsbe9/n+t5772mlS5fOsO3dd9/VAO369euapmla165dtR49emTYZ926dZper9du37593+N6eHhoffv2zbCtTZs2mre3t+bt7a1FRERomqZpCQkJmqurqzZ9+nTrfikpKVq+fPm0UaNGaZqmaatWrcrQn3LlymlDhw69b7tCCCFsQ0bIhBBCZAsjR45k2rRpHDx48LGPUaZMGfT69I+2PHnyUK5cOev3BoOBoKAgLl26BMDu3bs5duwYvr6++Pj44OPjQ2BgIElJSRw/ftz6uHLlyuHm5mb9/uDBg1SoUAFvb2/rtlq1amEymTh8+PB9+3bw4EGqV6+eYVtERESG73fv3s3UqVOtffHx8SEqKgqTycTJkycz/TpMnDiRXbt20aVLF27dugWo0bfU1FRq1apl3c/V1ZVq1ao98DXv27cvn3/+ObVq1eLjjz9mz549me6DEEKIzHFxdgeEEEIIgLp16xIVFcV7771H586dM/xMr9ejaVqGbampqfccw9XVNcP3Op3uvttMJhMACQkJVK5cmenTp99zrNy5c1vv3xl42VNCQgI9e/akb9++9/zsQVUln3322XuCwLx58wIQGBiYpf5069aNqKgoFi1axLJlyxg+fDhjxozhrbfeytJxhRBCpJMRMiGEENnGiBEj+Pvvv4mJicmwPXfu3MTGxmYIynbt2pXl9ipVqsTRo0cJCQmhWLFiGW7+/v4PfFypUqXYvXt3hmIbGzZsQK/XW4t+3O8xW7ZsybBt06ZN9/TnwIED9/SlWLFiGUbo7tShQweWL1/Ozp07H/pcixYtipubGxs2bLBuS01NZevWrZQuXfqBjytYsCC9evVizpw5vP322/zwww8PbUcIIcSjkYBMCCFEtlGuXDk6duzIN998k2F7vXr1uHz5MqNGjeL48eNMmDCBJUuWZLm9jh07EhwcTOvWrVm3bh0nT55k9erV9O3b96EFRjp27IiHhwedOnVi3759rFq1irfeeovXXnuNPHny3PcxvXr14ujRowwaNIjDhw8zY8YMpk6dmmGfd999l40bN9KnTx927drF0aNHmT9//kOLevTv35+IiAgaNGjA119/zY4dOzh58iRLly5lyZIlGAwGQI3yvfnmmwwaNIh//vmHAwcO0L17d27dukXXrl3ve+x+/fqxdOlSTp48yY4dO1i1ahWlSpX6j1dVCCHEo5CATAghRLby6aefWlMKLUqVKsXEiROZMGECFSpUYMuWLQwcODDLbXl5ebF27VrCwsJ44YUXKFWqFF27diUpKQk/P7+HPm7p0qVcu3aNqlWr0q5dOxo0aMC33377wMeEhYUxe/Zs5s2bR4UKFe4pSQ9Qvnx51qxZw5EjR6hTpw7h4eF89NFH5MuX74HH9fDwIDo6mnfffZcpU6ZQu3ZtSpUqRb9+/ahVqxbz5s2z7jtixAjatm3La6+9RqVKlTh27BhLly4lICDgvsc2Go307t2bUqVK0aRJE4oXL87EiRMf2BchhBCPTqfdnZQvhBBCCCGEEMIhZIRMCCGEEEIIIZxEAjIhhBBCCCGEcBIJyIQQQgghhBDCSSQgE0IIIYQQQggnkYBMCCGEEEIIIZxEAjIhhBBCCCGEcBIJyIQQQgghhBDCSSQgE0IIIYQQQggnkYBMCCGEEEIIIZxEAjIhhBBCCCGEcBIJyIQQQgghhBDCSf4fsMU5u73oMMEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "sns.histplot(final_data['home_goal'], kde=True, color='blue', label='Gols da Casa')\n",
    "sns.histplot(final_data['away_goal'], kde=True, color='red', label='Gols do Visitante')\n",
    "plt.title('Distribuição de Gols por Partida (Casa vs Visitante)')\n",
    "plt.xlabel('Número de Gols')\n",
    "plt.ylabel('Frequência')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d45756-dec6-46f8-930a-13c16d12f5bf",
   "metadata": {},
   "source": [
    "##### Essa análise mostra quais times têm mais vitórias no dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9c9b0fa7-142c-49ab-9764-061af1cbe957",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "winner\n",
       "Flamengo-RJ         4753\n",
       "Atletico-MG         4688\n",
       "Corinthians-SP      4569\n",
       "Santos-SP           4558\n",
       "Gremio-RS           4482\n",
       "Sao Paulo-SP        4469\n",
       "Fluminense-RJ       4332\n",
       "Palmeiras-SP        4301\n",
       "Internacional-RS    4172\n",
       "Atletico-PR         4008\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verificar o time vencedor em cada partida\n",
    "final_data['winner'] = final_data.apply(lambda row: row['home_team'] if row['home_goal'] > row['away_goal'] else (row['away_team'] if row['away_goal'] > row['home_goal'] else 'Empate'), axis=1)\n",
    "\n",
    "# Contar o número de vitórias por time (excluindo empates)\n",
    "vitorias_por_time = final_data[final_data['winner'] != 'Empate']['winner'].value_counts()\n",
    "\n",
    "# Exibir os 10 times com mais vitórias\n",
    "vitorias_por_time.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f32567c-53f1-4a48-9617-8463a9dd87f2",
   "metadata": {},
   "source": [
    "##### Além de verificar os times que mais venceram, é interessante ver a frequência de empates nas partidas e analisar se existe uma tendência em certas temporadas ou rodadas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "41bab1cd-72eb-4e3e-bbcf-2622d4cef0ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empates: 15802 (15.80%)\n"
     ]
    }
   ],
   "source": [
    "# Contar o número de empates\n",
    "empates = final_data[final_data['winner'] == 'Empate'].shape[0]\n",
    "total_partidas = final_data.shape[0]\n",
    "\n",
    "# Exibir a proporção de empates\n",
    "print(f\"Empates: {empates} ({empates / total_partidas * 100:.2f}%)\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "079c3366-3f6e-44e5-9b8e-18cc6ac9027e",
   "metadata": {},
   "source": [
    "#### Desempenho por temporada:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "56ce1674-eb8f-461f-ac19-c7431ea4aed9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>winner</th>\n",
       "      <th>America-MG</th>\n",
       "      <th>Atletico-GO</th>\n",
       "      <th>Atletico-MG</th>\n",
       "      <th>Atletico-PR</th>\n",
       "      <th>Avai-SC</th>\n",
       "      <th>Bahia-BA</th>\n",
       "      <th>Botafogo-RJ</th>\n",
       "      <th>Ceara-CE</th>\n",
       "      <th>Chapecoense-SC</th>\n",
       "      <th>Corinthians-SP</th>\n",
       "      <th>...</th>\n",
       "      <th>Parana-PR</th>\n",
       "      <th>Ponte Preta-SP</th>\n",
       "      <th>Portuguesa-SP</th>\n",
       "      <th>Red Bull Bragantino-SP</th>\n",
       "      <th>Santa Cruz-PE</th>\n",
       "      <th>Santos-SP</th>\n",
       "      <th>Sao Paulo-SP</th>\n",
       "      <th>Sport-PE</th>\n",
       "      <th>Vasco da Gama-RJ</th>\n",
       "      <th>Vitoria-BA</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>0</td>\n",
       "      <td>310</td>\n",
       "      <td>489</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>385</td>\n",
       "      <td>425</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>412</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>364</td>\n",
       "      <td>339</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>438</td>\n",
       "      <td>486</td>\n",
       "      <td>342</td>\n",
       "      <td>373</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>465</td>\n",
       "      <td>425</td>\n",
       "      <td>0</td>\n",
       "      <td>375</td>\n",
       "      <td>428</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>415</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>317</td>\n",
       "      <td>382</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>410</td>\n",
       "      <td>372</td>\n",
       "      <td>0</td>\n",
       "      <td>388</td>\n",
       "      <td>422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>402</td>\n",
       "      <td>0</td>\n",
       "      <td>324</td>\n",
       "      <td>352</td>\n",
       "      <td>0</td>\n",
       "      <td>361</td>\n",
       "      <td>430</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>413</td>\n",
       "      <td>469</td>\n",
       "      <td>381</td>\n",
       "      <td>0</td>\n",
       "      <td>332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>452</td>\n",
       "      <td>388</td>\n",
       "      <td>317</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>337</td>\n",
       "      <td>492</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>394</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>465</td>\n",
       "      <td>428</td>\n",
       "      <td>467</td>\n",
       "      <td>326</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>268</td>\n",
       "      <td>0</td>\n",
       "      <td>414</td>\n",
       "      <td>420</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>380</td>\n",
       "      <td>0</td>\n",
       "      <td>383</td>\n",
       "      <td>378</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>292</td>\n",
       "      <td>421</td>\n",
       "      <td>369</td>\n",
       "      <td>359</td>\n",
       "      <td>0</td>\n",
       "      <td>384</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "winner  America-MG  Atletico-GO  Atletico-MG  Atletico-PR  Avai-SC  Bahia-BA  \\\n",
       "season                                                                         \n",
       "2012             0          310          489            0        0       385   \n",
       "2013             0            0          465          425        0       375   \n",
       "2014             0            0          427          402        0       324   \n",
       "2015             0            0          452          388      317         0   \n",
       "2016           268            0          414          420        0         0   \n",
       "\n",
       "winner  Botafogo-RJ  Ceara-CE  Chapecoense-SC  Corinthians-SP  ...  Parana-PR  \\\n",
       "season                                                         ...              \n",
       "2012            425         0               0             412  ...          0   \n",
       "2013            428         0               0             415  ...          0   \n",
       "2014            352         0             361             430  ...          0   \n",
       "2015              0         0             337             492  ...          0   \n",
       "2016            380         0             383             378  ...          0   \n",
       "\n",
       "winner  Ponte Preta-SP  Portuguesa-SP  Red Bull Bragantino-SP  Santa Cruz-PE  \\\n",
       "season                                                                         \n",
       "2012               364            339                       0              0   \n",
       "2013               317            382                       0              0   \n",
       "2014                 0              0                       0              0   \n",
       "2015               394              0                       0              0   \n",
       "2016               356              0                       0            292   \n",
       "\n",
       "winner  Santos-SP  Sao Paulo-SP  Sport-PE  Vasco da Gama-RJ  Vitoria-BA  \n",
       "season                                                                   \n",
       "2012          438           486       342               373           0  \n",
       "2013          410           372         0               388         422  \n",
       "2014          413           469       381                 0         332  \n",
       "2015          465           428       467               326           0  \n",
       "2016          421           369       359                 0         384  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Contar as vitórias por temporada para cada time\n",
    "vitorias_por_temporada = final_data[final_data['winner'] != 'Empate'].groupby(['season', 'winner']).size().unstack(fill_value=0)\n",
    "\n",
    "# Exibir as 5 primeiras linhas\n",
    "vitorias_por_temporada.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "62472332-9359-48c6-aa80-31f0a5c1cc93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SP    21449\n",
       "RJ    14887\n",
       "MG     9273\n",
       "RS     9260\n",
       "PR     6967\n",
       "SC     5749\n",
       "BA     4771\n",
       "PE     3850\n",
       "GO     3827\n",
       "CE     3234\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vitorias_por_estado = final_data[final_data['winner'] != 'Empate'].apply(lambda row: row['home_team_state'] if row['home_goal'] > row['away_goal'] else row['away_team_state'], axis=1).value_counts()\n",
    "# Exibir os estados com mais vitórias\n",
    "vitorias_por_estado.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fc242ed8-95ed-4693-8cc1-993217bdf38a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>home_team</th>\n",
       "      <th>home_team_state</th>\n",
       "      <th>away_team</th>\n",
       "      <th>away_team_state</th>\n",
       "      <th>home_goal</th>\n",
       "      <th>away_goal</th>\n",
       "      <th>season</th>\n",
       "      <th>round</th>\n",
       "      <th>winner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Palmeiras-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Portuguesa-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Empate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-05-19 18:30:00</td>\n",
       "      <td>Sport-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>Flamengo-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Empate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-05-19 21:00:00</td>\n",
       "      <td>Figueirense-SC</td>\n",
       "      <td>SC</td>\n",
       "      <td>Nautico-PE</td>\n",
       "      <td>PE</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Figueirense-SC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Ponte Preta-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Atletico-MG</td>\n",
       "      <td>MG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Atletico-MG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Corinthians-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>Fluminense-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Fluminense-RJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Botafogo-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>Sao Paulo-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Botafogo-RJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2012-05-20 16:00:00</td>\n",
       "      <td>Internacional-RS</td>\n",
       "      <td>RS</td>\n",
       "      <td>Coritiba-PR</td>\n",
       "      <td>PR</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Internacional-RS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2012-05-20 18:30:00</td>\n",
       "      <td>Vasco da Gama-RJ</td>\n",
       "      <td>RJ</td>\n",
       "      <td>Gremio-RS</td>\n",
       "      <td>RS</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Vasco da Gama-RJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2012-05-20 18:30:00</td>\n",
       "      <td>Bahia-BA</td>\n",
       "      <td>BA</td>\n",
       "      <td>Santos-SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Empate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2012-05-20 18:30:00</td>\n",
       "      <td>Cruzeiro-MG</td>\n",
       "      <td>MG</td>\n",
       "      <td>Atletico-GO</td>\n",
       "      <td>GO</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1</td>\n",
       "      <td>Empate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime         home_team home_team_state      away_team  \\\n",
       "0  2012-05-19 18:30:00      Palmeiras-SP              SP  Portuguesa-SP   \n",
       "1  2012-05-19 18:30:00          Sport-PE              PE    Flamengo-RJ   \n",
       "2  2012-05-19 21:00:00    Figueirense-SC              SC     Nautico-PE   \n",
       "3  2012-05-20 16:00:00    Ponte Preta-SP              SP    Atletico-MG   \n",
       "4  2012-05-20 16:00:00    Corinthians-SP              SP  Fluminense-RJ   \n",
       "5  2012-05-20 16:00:00       Botafogo-RJ              RJ   Sao Paulo-SP   \n",
       "6  2012-05-20 16:00:00  Internacional-RS              RS    Coritiba-PR   \n",
       "7  2012-05-20 18:30:00  Vasco da Gama-RJ              RJ      Gremio-RS   \n",
       "8  2012-05-20 18:30:00          Bahia-BA              BA      Santos-SP   \n",
       "9  2012-05-20 18:30:00       Cruzeiro-MG              MG    Atletico-GO   \n",
       "\n",
       "  away_team_state  home_goal  away_goal  season  round            winner  \n",
       "0              SP        1.0        1.0    2012      1            Empate  \n",
       "1              RJ        1.0        1.0    2012      1            Empate  \n",
       "2              PE        2.0        1.0    2012      1    Figueirense-SC  \n",
       "3              MG        0.0        1.0    2012      1       Atletico-MG  \n",
       "4              RJ        0.0        1.0    2012      1     Fluminense-RJ  \n",
       "5              SP        4.0        2.0    2012      1       Botafogo-RJ  \n",
       "6              PR        2.0        0.0    2012      1  Internacional-RS  \n",
       "7              RS        2.0        1.0    2012      1  Vasco da Gama-RJ  \n",
       "8              SP        0.0        0.0    2012      1            Empate  \n",
       "9              GO        0.0        0.0    2012      1            Empate  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae354cbb-aadd-40dc-9ce4-a055ef903b64",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d78d608-3e9a-4545-b94a-01074610c016",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a066dd39-22a8-4a63-a426-7e72c587b7c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc27e349-7570-440f-9fba-0faaecc3843f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "593138d2-3739-4698-b7dc-a67370a85d09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b8afdd1-455e-44e1-9a7b-7d618abf7f39",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b5ccb52-b870-46d9-9481-b879ea6419b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76f15a8b-c236-4af9-af58-d1adac382c03",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
